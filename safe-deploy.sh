#!/usr/bin/env bash
# safe-deploy.sh - Safe deployment script for real hardware

set -euo pipefail

echo "üöÄ NixOS Safe Deployment Script"
echo "==============================="

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   echo "‚ùå Don't run this script as root!"
   echo "Run as normal user, it will prompt for sudo when needed."
   exit 1
fi

# Function to check if we're in the right directory
check_environment() {
    echo "üîç Checking environment..."
    
    if [[ ! -f "flake.nix" ]] || [[ ! -f "configuration.nix" ]]; then
        echo "‚ùå Error: Not in a NixOS configuration directory!"
        echo "Make sure you're in the cloned nixos repository."
        exit 1
    fi
    
    if [[ ! -f "hardware-configuration.nix" ]]; then
        echo "‚ö†Ô∏è  Warning: No hardware-configuration.nix found!"
        echo "This file should be generated by nixos-generate-config"
        echo ""
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    echo "‚úÖ Environment check passed"
}

# Function to backup current configuration
backup_config() {
    echo "üíæ Creating backup..."
    
    BACKUP_DIR="$HOME/.nixos-backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    if [[ -f "/etc/nixos/configuration.nix" ]]; then
        sudo cp -r /etc/nixos/* "$BACKUP_DIR/" 2>/dev/null || true
        sudo chown -R "$USER:$USER" "$BACKUP_DIR"
        echo "‚úÖ Backup created at: $BACKUP_DIR"
    else
        echo "‚ÑπÔ∏è  No existing configuration to backup"
    fi
}

# Function to validate configuration
validate_config() {
    echo "üîç Validating configuration..."
    
    if command -v nix >/dev/null 2>&1; then
        echo "Testing flake evaluation..."
        if nix flake check --no-build .; then
            echo "‚úÖ Configuration syntax is valid"
        else
            echo "‚ùå Configuration has errors!"
            echo "Please fix the errors before deployment."
            exit 1
        fi
    else
        echo "‚ö†Ô∏è  Nix not available for validation (normal during installation)"
    fi
}

# Function to detect hardware
detect_hardware() {
    echo "üîß Hardware detection..."
    
    # Check for NVIDIA GPU
    if lspci | grep -i nvidia >/dev/null 2>&1; then
        echo "‚úÖ NVIDIA GPU detected - drivers will be installed"
    else
        echo "‚ÑπÔ∏è  No NVIDIA GPU detected"
        echo "‚ö†Ô∏è  You may want to disable NVIDIA drivers in graphics.nix"
        read -p "Continue? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # Check CPU
    if grep -q "Intel" /proc/cpuinfo; then
        echo "‚úÖ Intel CPU detected"
    elif grep -q "AMD" /proc/cpuinfo; then
        echo "‚úÖ AMD CPU detected"
    fi
    
    # Check for VM environment
    if systemd-detect-virt >/dev/null 2>&1; then
        VM_TYPE=$(systemd-detect-virt)
        echo "‚ö†Ô∏è  Running in virtual machine: $VM_TYPE"
        echo "This configuration is optimized for real hardware."
        echo "Some features (like NVIDIA drivers) may not work properly."
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Function to perform deployment
deploy() {
    echo "üöÄ Starting deployment..."
    
    # Method 1: If /etc/nixos exists (post-installation)
    if [[ -d "/etc/nixos" ]]; then
        echo "üìÅ Updating /etc/nixos configuration..."
        sudo cp -r ./* /etc/nixos/
        sudo nixos-rebuild switch --flake /etc/nixos#default
        
    # Method 2: Direct flake rebuild (preferred)
    else
        echo "üìÅ Using direct flake rebuild..."
        sudo nixos-rebuild switch --flake .#default
    fi
    
    echo "‚úÖ System deployment completed!"
    
    # Setup home manager if not already done
    if ! command -v home-manager >/dev/null 2>&1; then
        echo "üè† Setting up Home Manager..."
        nix run home-manager/release-25.05 -- switch --flake .#nghuytan
    else
        echo "üè† Updating Home Manager..."
        home-manager switch --flake .#nghuytan
    fi
    
    echo "‚úÖ Home Manager setup completed!"
}

# Function to post-deployment checks
post_deploy_check() {
    echo "üîç Post-deployment verification..."
    
    # Check if Hyprland is available
    if command -v hyprland >/dev/null 2>&1; then
        echo "‚úÖ Hyprland is installed"
    else
        echo "‚ùå Hyprland installation failed"
    fi
    
    # Check if NVIDIA drivers work (if NVIDIA GPU present)
    if lspci | grep -i nvidia >/dev/null 2>&1; then
        if command -v nvidia-smi >/dev/null 2>&1; then
            echo "‚úÖ NVIDIA drivers are available"
        else
            echo "‚ö†Ô∏è  NVIDIA drivers may not be properly installed"
        fi
    fi
    
    # Check path detection
    if [[ -f "$HOME/.config/nixos-paths.env" ]]; then
        echo "‚úÖ Path detection system is configured"
        source "$HOME/.config/nixos-paths.env"
        echo "   Config path: $NIXOS_CONFIG_PATH"
    else
        echo "‚ö†Ô∏è  Path detection not yet configured (will happen on next login)"
    fi
    
    echo ""
    echo "üéâ Deployment completed successfully!"
    echo ""
    echo "üìã Next steps:"
    echo "1. Reboot to ensure all changes take effect"
    echo "2. Login and select Hyprland session from SDDM"
    echo "3. If black screen: Ctrl+Alt+F2 for TTY access"
    echo "4. Test basic functionality (terminal, wifi, etc.)"
    echo ""
    echo "üÜò If issues occur:"
    echo "- Check logs: journalctl -xeu display-manager"
    echo "- Rebuild: sudo nixos-rebuild switch --flake /etc/nixos#default"
    echo "- Restore backup from: $HOME/.nixos-backups/"
}

# Main execution flow
main() {
    echo "Starting safe deployment process..."
    echo ""
    
    check_environment
    echo ""
    
    backup_config
    echo ""
    
    validate_config
    echo ""
    
    detect_hardware
    echo ""
    
    echo "üö® FINAL CONFIRMATION"
    echo "This will modify your system configuration."
    echo "Make sure you have backups and know how to recover!"
    echo ""
    read -p "Proceed with deployment? (y/N): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        deploy
        echo ""
        post_deploy_check
    else
        echo "‚ùå Deployment cancelled by user"
        exit 1
    fi
}

# Run main function
main "$@"
